FINISH_LINE_DATA_URI = "<%= asset_data_uri 'views/play/finish-line.png' %>"

Play.Finishable = Ember.Mixin.create

  track: Ember.required()
  scaleFactor: Ember.required()
  paperOffset: Ember.required()
  renderCanvas: Ember.required()
  finishLineImage: null

  FINISH_LINE_START_POINT_OFFSET: 20
  FINISH_LINE_ANGLE_POINT_OFFSET: 23

  FINISH_LINE_X_OFFSET: -35
  FINISH_LINE_Y_OFFSET: -10

  FINISH_LINE_WIDTH: 70
  FINISH_LINE_HEIGHT: 20

  didRenderTrack: ->
    @_super()
    @createFinishLineImage()
    @loadFinishLineImage()

  loadFinishLineImage: ->
    @finishLineImage.onload = => @drawFinishLine()
    @finishLineImage.src = FINISH_LINE_DATA_URI

  createFinishLineImage: -> @set 'finishLineImage', new Image()

  drawFinishLine: ->
    # take two points from the track with a small offset from the start
    # so that the car has a small overlap over the finish line.
    startPoint = @track.getPointAtLength @FINISH_LINE_START_POINT_OFFSET
    anglePoint = @track.getPointAtLength @FINISH_LINE_ANGLE_POINT_OFFSET

    # the vector is used to calculate the correct angle for the finish line
    finishLineVector = Shared.Vector.create from: startPoint, to: anglePoint

    canvasContext = @renderCanvas.get(0).getContext('2d')

    scaledFinishLineWidth = @FINISH_LINE_WIDTH * @scaleFactor
    scaledFinishLineHeight = @FINISH_LINE_HEIGHT * @scaleFactor

    canvasContext.translate startPoint.x * @scaleFactor + @paperOffset, startPoint.y * @scaleFactor + @paperOffset
    canvasContext.rotate finishLineVector.clockwiseAngle() * Math.PI / 180
    canvasContext.translate @FINISH_LINE_X_OFFSET * @scaleFactor, @FINISH_LINE_Y_OFFSET * @scaleFactor
    canvasContext.drawImage @finishLineImage, 0, 0, scaledFinishLineWidth, scaledFinishLineHeight
